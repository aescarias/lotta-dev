---
import { format } from "date-fns";
import type { MarkdownHeading } from "astro";
import type { CollectionEntry } from "astro:content";
import TOCEntry from "../components/TOCEntry.astro";
import BaseSite from "./BaseSite.astro";

interface Props {
  frontmatter: CollectionEntry<"posts">["data"];
  readingTime: number;
  headings: MarkdownHeading[];
}

export interface TOCHeading extends MarkdownHeading {
  children: TOCHeading[];
}

function getToc(headings: MarkdownHeading[]): TOCHeading[] {
  const contents = [];
  const parent = new Map();

  for (const heading of headings) {
    const child = { ...heading, children: [] };
    parent.set(heading.depth, child);
    if (heading.depth === 2) {
      contents.push(child);
    } else {
      parent.get(heading.depth - 1).children.push(child);
    }
  }
  return contents;
}

const { frontmatter, readingTime, headings } = Astro.props;
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const heading = entry.target.querySelector("h1, h2, h3, h4, h5, h6");
          if (!heading) return;

          const anchor = document.querySelector<HTMLAnchorElement>(
            `.blog-toc a[href="#${heading.id}"]`
          );
          if (!anchor) return;

          if (entry.isIntersecting) {
            anchor.classList.add("active");
          } else {
            anchor.classList.remove("active");
          }
        });
      },
      {
        rootMargin: "-5% 0% -95% 0%",
      }
    );

    document.querySelectorAll(".blog-content section")?.forEach((entry) => {
      observer.observe(entry);
    });

    async function copyCode(block: Element, button: HTMLButtonElement) {
      const text = block.querySelector("code")!.innerText;

      await navigator.clipboard.writeText(text);

      const icon = button.querySelector("i")!;
      icon.className = "ph ph-bold ph-check";

      setTimeout(() => {
        icon.className = "ph ph-bold ph-copy";
      }, 1000);
    }

    document.querySelectorAll(".blog-content pre")?.forEach((block) => {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.className = "copy-code";

      copyButton.addEventListener("click", async () => {
        await copyCode(block, copyButton);
      });

      const copyIcon = document.createElement("i");
      copyIcon.className = "ph ph-bold ph-copy";

      copyButton.appendChild(copyIcon);

      block.setAttribute("tabindex", "0");
      block.appendChild(copyButton);

      block.parentNode!.insertBefore(wrapper, block);
      wrapper.appendChild(block);
    });
  });
</script>

<BaseSite title={frontmatter.title} description={frontmatter.description}>
  <h1 class="blog-title">{frontmatter.title}</h1>
  <div class="blog-meta mono subtext">
    <span>
      <i class="ph ph-bold ph-calendar" aria-label="published"></i>
      <time datetime={frontmatter.published.toString()}>
        {format(frontmatter.published, "EEEE, MMMM dd, yyyy")}
      </time>
    </span>
    {
      frontmatter.updated ? (
        <span>
          <i class="ph ph-bold ph-note-pencil" aria-label="last updated" />
          <time datetime={frontmatter.updated.toString()}>
            {format(frontmatter.updated, "MMMM dd, yyyy")}
          </time>
        </span>
      ) : undefined
    }
    <span>
      <i class="ph ph-bold ph-clock" aria-label="reading time"></i>
      {readingTime.toFixed(2)} minute read
    </span>
    <ul class="tags">
      <i class="ph ph-bold ph-tag" aria-label="tags"></i>
      {
        frontmatter.tags.map((tag: string) => (
          <li>
            <a class="tag" href={`/tags/${tag}`}>
              {tag}
            </a>
          </li>
        ))
      }
    </ul>
  </div>

  <p class="mono subtext">
    <span aria-hidden="true">//</span>
    {frontmatter.description}
  </p>

  <section class="blog-wrapper">
    <main class="blog-content">
      <slot />
    </main>

    <aside class="blog-toc">
      <ul>
        {getToc(headings).map((h) => <TOCEntry heading={h} />)}
      </ul>
    </aside>
  </section>
</BaseSite>

<style>
  .blog-title {
    font-size: 2rem;
  }

  .blog-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75em;
    align-items: center;
  }

  .blog-wrapper {
    display: grid;
    gap: 2em;
    grid-template-columns: 4fr 1fr;
  }

  .blog-toc {
    position: sticky;
    top: 0;
    align-self: start;
  }

  @media screen and (max-width: 800px) {
    .blog-toc {
      display: none;
    }
    .blog-wrapper {
      display: block;
    }
  }

  .tags {
    list-style: none;
    padding-inline: 0;
    display: inline-flex;
    align-items: center;
    flex-wrap: wrap;
    column-gap: 0.75rem;
    margin: 0;
  }

  .tags .tag {
    display: inline-flex;
    align-items: center;
    gap: 0.5em;
    color: var(--clr-fg-second);
  }

  .tags .tag:hover {
    color: var(--clr-link-active);
  }
</style>

<style is:global>
  /* These styles are invoked via Javascript or plugins */
  .blog-content :is(h1, h2, h3, h4, h5, h6) a[aria-hidden="true"] {
    display: none;
  }

  .blog-content :is(h1, h2, h3, h4, h5, h6):hover a[aria-hidden="true"] {
    display: inline-block;
    margin-inline: 0.25em;
  }

  .copy-code {
    position: absolute;
    top: 0;
    right: 0;
    padding: 0.5rem;
    font-size: 1.25rem;
    background: none;
  }
  .copy-code:hover {
    background: none;
  }
</style>

<style is:global>
  [data-theme="light"] .astro-code,
  [data-theme="light"] .astro-code span {
    color: var(--shiki-light) !important;
    background-color: var(--shiki-light-bg) !important;
  }

  [data-theme="dark"] .astro-code,
  [data-theme="dark"] .astro-code span {
    color: var(--shiki-dark) !important;
    background-color: var(--shiki-dark-bg) !important;
  }

  .blog-content {
    overflow: auto;
  }

  .blkquote,
  .blog-content blockquote {
    border-left: 5px solid var(--clr-accent);
    background: var(--clr-card);
    padding-inline: 1.25em;
    padding-block: 0.2em;
    margin-inline: 0.4em;
  }
  .blog-content p {
    text-align: justify;
  }
  .blog-content pre {
    padding: 0.75em;
    border-radius: 5px;
  }
  .blog-content :not(pre) > code {
    background-color: var(--clr-bg-second);
    padding: 0 0.2em;
  }
  .blog-content img {
    display: block;
    max-width: 100%;
  }
  .blog-toc ul {
    list-style: none;
    padding-inline: 1em;
  }
  .blog-toc ul:first-child {
    padding-inline: 0;
  }
  .blog-toc li {
    margin-block: 0.5em;
  }
  .blog-toc {
    font-size: 1.15rem;
  }
  .blog-toc a {
    color: var(--clr-fg-second);
  }
  .blog-toc a.active,
  .blog-toc a:hover {
    color: var(--clr-link-active);
  }
</style>
